name: version-update
description: Github Action for Updating Versions

inputs:
  github_token:
    description: Github Token for git commit or gh pr create
    required: true
  workspaces:
    default: ".:text"
    description: Paths to the workspaces (separated by comma)
  version_message:
    default: version pull request
    description: Version pull request message
  no_pr:
    description: Use pull request to increase the version

outputs:
  version_branch:
    description: Name of the version branch
    value: "${{ steps.version_branch.outputs.version_branch }}"
  pr_title:
    description: Title of the version pull request
    value: "${{ steps.version_branch.outputs.pr_title }}"
  tag:
    description: Tag to have been pushed
    value: "${{ steps.tag_info.outputs.tag }}"
  # status:
  #   dexscription: Status of the version increase
  #   value: "${{ steps. }}"

runs:
  using: "composite"
  steps:
    - name: Git Prerequisites
      id: git_prerequisites
      run: |
        source ${{ github.workspace }}/src/logging.sh
        source ${{ github.workspace }}/src/utils.sh
        source ${{ github.workspace }}/src/git.sh

        git_get_commit_message --store
        git_get_last_created_tag --store
      shell: bash
    - name: Workspace Prerequisites
      id: ws_prerequisites
      run: |
        source ${{ github.workspace }}/src/logging.sh
        source ${{ github.workspace }}/src/utils.sh
        
        source ${{ github.workspace }}/src/package_version_detect.sh
        source ${{ github.workspace }}/src/package_name_detect.sh
        source ${{ github.workspace }}/src/project.sh

        # gather_workspaces_info --workspaces "${{ inputs.workspaces }}" --store
        gather_changed_workspaces_info \
          --workspaces "${{ inputs.workspaces }}" \
          --tag "${{ steps.git_prerequisites.outputs.last_tag }}" \
          --store
      shell: bash

    - name: Increase Version and Commit the Changes
      id: version_increase
      if: ${{ github.event_name == 'push' }}
      shell: bash
      run: |
        source ${{ github.workspace }}/src/logging.sh
        source ${{ github.workspace }}/src/utils.sh
        source ${{ github.workspace }}/src/git.sh
        source ${{ github.workspace }}/src/version.sh

        source ${{ github.workspace }}/src/package_version_detect.sh
        source ${{ github.workspace }}/src/package_version_update.sh
        source ${{ github.workspace }}/src/project.sh

        increase_workspaces_versions \
          --workspaces-info "${{ steps.ws_prerequisites.outputs.changed_workspaces_info }}" \
          --commit-message "${{ steps.git_prerequisites.outputs.commit_message }}" \
          --tag "${{ steps.git_prerequisites.outputs.last_tag }}" \
          --store

        git diff

    - name: Push new Version
      if: ${{ github.event_name == 'push' && steps.ws_prerequisites.outputs.changed_workspaces_info != steps.version_increase.outputs.updated_workspaces_info }}
      shell: bash
      run: |
        source ${{ github.workspace }}/src/logging.sh
        source ${{ github.workspace }}/src/utils.sh
        source ${{ github.workspace }}/src/git.sh

        source ${{ github.workspace }}/src/package_version_detect.sh
        source ${{ github.workspace }}/src/package_version_update.sh
        source ${{ github.workspace }}/src/project.sh

        git_setup_user

        updated_version=$(echo "${{ steps.version_increase.outputs.updated_workspaces_info }}" | 
          awk -F';' '{print $1}' | 
          awk -F':' '{ print $NF }')

        if [[ -z "${{ inputs.no_pr }}" ]]; then
          git_create_version_branch \
            --version "${updated_version}" \
            --pr-title "${{ inputs.version_message }} ${updated_version}" \
            --pr-message "pr message"
        else
          git_commit_version_changes \
            --version "${main_workspace_version}"
        fi
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    # - name: Build Versions List
    #   if: ${{ github.event_name == 'push' }}
    #   id: versions_info
    #   shell: bash
    #   run: |
    #     source ${{ github.workspace }}/action_lib.sh

    #     workspaces_string="${{ inputs.workspaces }}"
    #     IFS=',' read -r -a workspaces_array <<< "$workspaces_string"

    #     version_files_string="${{ inputs.version_files }}"
    #     IFS=',' read -r -a version_files_array <<< "$version_files_string"

    #     versions_array=()

    #     for ((i=0; i<${#workspaces_array[@]}; i++)); do
    #       workspace=${workspaces_array[$i]}
    #       version_file=${version_files_array[$i]}
    #       cd $workspace

    #       version=$(read_version "$version_file")
    #       versions_array+=($version)

    #       cd ${{ github.workspace }}
    #     done

    #     IFS=',' versions_string="${versions_array[*]}"
    #     echo "versions=$versions_string"
    #     echo "versions=$versions_string" >> $GITHUB_OUTPUT

    # - name: Prepare Tag
    #   id: tag_info
    #   if: ${{ github.event_name == 'push' && steps.versions_info.outputs.versions }}
    #   shell: bash
    #   run: |
    #     source ${{ github.workspace }}/action_lib.sh

    #     workspaces_string="${{ inputs.workspaces }}"
    #     IFS=',' read -r -a workspaces_array <<< "$workspaces_string"

    #     version_files_string="${{ inputs.version_files }}"
    #     IFS=',' read -r -a version_files_array <<< "$version_files_string"

    #     versions_string='${{ steps.versions_info.outputs.versions }}'
    #     IFS=',' read -r -a versions_array <<< "$versions_string"

    #     tag="v${versions_array[0]}"

    #     if [[ ${#versions_array[@]} -gt 1 ]]; then
    #       workspaces_array=("${workspaces_array[@]:1}")
    #       version_files_array=("${version_files_array[@]:1}")
    #       versions_array=("${versions_array[@]:1}")

    #       for (( i=0; i<${#versions_array[@]}; i++ )); do
    #         workspace=${workspaces_array[$i]}
    #         version_file=${version_files_array[$i]}
    #         cd $workspace
    #         workspace_name=$(read_name "$version_file" "$workspace")
    #         tag="${tag}_${workspace_name}${versions_array[$i]}"

    #         cd ${{ github.workspace }}
    #       done
    #     fi

    #     tag=$(echo $tag | sed -e 's/[^a-zA-Z0-9]/_/g')
    #     echo "tag=$tag"
    #     echo "tag=$tag" >> $GITHUB_OUTPUT

    # - name: Set up Git
    #   if: ${{ github.event_name == 'push' }}
    #   shell: bash
    #   run: |
    #     git config user.name "GitHub Actions"
    #     git config user.email "actions@github.com"
    #     git config --global --add safe.directory "$GITHUB_WORKSPACE"
    #     git remote set-url origin https://x-access-token:${{ inputs.github_token }}@github.com/${{ github.repository }}.git

    #     pwd
    #     ls -la .
    #     git remote show origin

    # - name: Create Version Branch
    #   env:
    #     GH_TOKEN: ${{ inputs.github_token }}
    #   id: version_branch
    #   if: ${{ github.event_name == 'push' && steps.version_info.outputs.increment && steps.versions_info.outputs.versions && ! inputs.no_pr }}
    #   shell: bash
    #   run: |
    #     tag="${{ steps.tag_info.outputs.tag }}"
    #     version_branch="version_${tag}"
    #     echo "version_branch=${version_branch}" >> $GITHUB_OUTPUT

    #     # Check if there are changes before creating a branch and committing
    #     if [[ -n "$(git status --porcelain)" ]]; then
    #       git checkout -b $version_branch
    #       git add .
    #       git commit -am "chore: ${{ inputs.version_message }} ${{ steps.tag_info.outputs.tag }}"
    #       git push origin $version_branch

    #       pr_title="${{ inputs.version_message }} ${{ steps.tag_info.outputs.tag }}"
    #       echo "pr_title=${pr_title}" >> $GITHUB_OUTPUT
    #       gh pr create --base main --head "$version_branch" --title "$pr_title" --body "New Version Proposed"

    #       echo "version_pr=1" >> $GITHUB_OUTPUT
    #     else
    #       echo "::warning::No changes to commit. Skipping branch creation."
    #     fi

    # - name: Commit Version
    #   id: version_commit
    #   if: ${{ steps.versions_info.outputs.versions && inputs.no_pr }}
    #   shell: bash
    #   run: |
    #     git add .
    #     git commit -am "chore: ${{ inputs.version_message }} ${{ steps.version_info.outputs.versions }}

    #     echo "version_commit=1" >> $GITHUB_OUTPUT

    # - name: Create Tag
    #   id: tag_create_info
    #   if: ${{ github.event_name == 'push' && ( steps.version_commit.outputs.version_commit || contains(steps.git_info.outputs.commit_message, inputs.version_message) ) }}
    #   shell: bash
    #   run: |
    #     echo "${{ steps.git_info.outputs.commit_message }}"

    #     tag="${{ steps.tag_info.outputs.tag }}"
    #     git fetch --all --tags

    #     # Ensure the tag doesn't already exist
    #     if git rev-parse "$tag" >/dev/null 2>&1; then
    #       echo "::error::Tag $tag already exists. Skipping tag creation."
    #       exit 1
    #     else
    #       git tag "$tag"
    #       git push origin "$tag"
    #     fi
