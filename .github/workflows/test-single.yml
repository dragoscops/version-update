name: Test Version Update Action (Single)

on:
  workflow_call: {}
  #   inputs:
  #     title:
  #       description: Test Title
  #       required: true
  #       type: string
  #     workspaces:
  #       default: test/node
  #       description: Workspaces
  #       type: string
  #     version_files:
  #       default: package.json
  #       description: Version Files (for Workspaces)
  #       type: string
  #     commit_type:
  #       default: feat
  #       description: Type of Commit (Dictates Type of Version Increment)
  #       type: string
  #     version_message:
  #       default: "new version update"
  #       description: Message Included in the Version Commit/PR
  #       type: string
  #     no_pr:
  #       description: No Pull Request
  #       type: string
  # workflow_dispatch:
  #   inputs:
  #     title:
  #       description: Test Title
  #       required: true
  #       type: string
  #     workspaces:
  #       default: test/node
  #       description: Workspaces
  #       type: string
  #     version_files:
  #       default: package.json
  #       description: Version Files (for Workspaces)
  #       type: string
  #     commit_type:
  #       default: feat
  #       description: Type of Commit (Dictates Type of Version Increment)
  #       type: string
  #     version_message:
  #       default: "new version update"
  #       description: Message Included in the Version Commit/PR
  #       type: string
  #     no_pr:
  #       description: No Pull Request
  #       type: string

jobs:
  test-version-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch full history so git log works

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Commit Info
        id: git_info
        run: |
          last_commit_message=$(git log -1 --no-merges --pretty=format:%B)
          echo "last_commit_message=${last_commit_message}"
          echo "last_commit_message<<EOF" >> $GITHUB_OUTPUT
          echo "${last_commit_message}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          last_pr_message=$(git log -1 --pretty=format:%B)
          echo "last_pr_message=${last_pr_message}"
          echo "last_pr_message<<EOF" >> $GITHUB_OUTPUT
          echo "${last_pr_message}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Test Commit (Single Project)
        if: ${{ ! contains(steps.git_info.outputs.last_commit_message, inputs.version_message) }}
        run: |
          git pull origin main
          date +%s > ./test/node/.update
          git add ./test
          git commit -m "${{ inputs.commit_type }}: Added a feature"

      - name: Run Version Update Action (${{ inputs.title }})
        id: version_update_info
        uses: dragoscops/version-update@main
        with:
          github_token: "${{ secrets.GH_TOKEN }}"
          # github_token: "${{ secrets.GITHUB_TOKEN }}"
          version_message: "${{ inputs.version_message }}"
          workspaces: "${{ inputs.workspaces }}"
          version_files: "${{ inputs.version_files }}"
          no_pr: "${{ inputs.no_pr }}"

      - name: Pull Request Debug (${{ inputs.title }})
        if: ${{ ! contains(steps.git_info.outputs.last_commit_message, inputs.version_message) }}
        env:
          GH_TOKEN: "${{ secrets.GH_TOKEN }}"
        run: |
          echo "version_branch=${{ steps.version_update_info.outputs.version_branch }}"
          echo "pr_title=${{ steps.version_update_info.outputs.pr_title }}"
          echo "tag=${{ steps.version_update_info.outputs.tag }}"

          tag=${{ steps.version_update_info.outputs.tag }}

          gh pr list --state open
          pr_id=$(gh pr list --state open | grep "$version_branch" | grep "$pr_title" | awk -F' ' '{ print $1 }')

          echo pr_id=$pr_id
          git pull origin main
          gh pr merge $pr_id --squash --auto --delete-branch

          echo "Waiting for 2nd PR to end & vesion tag to be created..."

          ttl=10
          wait_time=20
          attempt=0
          while [ $attempt -lt $ttl ]; do
            echo "Checking for tag '$tag' (Attempt $((attempt + 1))/$ttl)..."

            git fetch --tags

            if git rev-parse --verify "refs/tags/$tag" >/dev/null 2>&1; then
              echo "Tag '$tag' found!"
              git push origin --delete "refs/tags/$tag"
              exit 0
            else
              echo "Tag '$tag' not found. Waiting for $wait_time seconds..."
              sleep $wait_time
            fi

            attempt=$((attempt + 1))
          done

          echo "::error::Tag '$tag' not found after $ttl attempts."
          exit 1
