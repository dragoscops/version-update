name: Test Version Update Action

on:
  workflow_call: {}
  # push: {}

jobs:
  prereqs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Commit Info
        id: git_info
        run: |
          last_commit_message=$(git log -1 --no-merges --pretty=format:%B)
          echo "last_commit_message=${last_commit_message}"
          echo "last_commit_message<<EOF" >> $GITHUB_OUTPUT
          echo "${last_commit_message}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          last_pr_message=$(git log -1 --pretty=format:%B)
          echo "last_pr_message=${last_pr_message}"
          echo "last_pr_message<<EOF" >> $GITHUB_OUTPUT
          echo "${last_pr_message}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
    outputs:
      last_commit_message: ${{ steps.git_info.outputs.last_commit_message }}
      last_pr_message: ${{ steps.git_info.outputs.last_pr_message }}

  # test-single-repo:
  #   if: ${{ !contains(needs.prereqs.outputs.last_commit_message, 'new version') || contains(needs.prereqs.outputs.last_commit_message, 'single repo') }}
  #   needs: prereqs
  #   name: Test Single Repo
  #   uses: dragoscops/version-update/.github/workflows/test-single.yml@main
  #   secrets: inherit
  #   with:
  #     title: Single Repo
  #     commit_type: feat
  #     version_message: new version single repo

  # test-multi-repo:
  #   if: ${{
  #     always()
  #     && ( !contains(needs.prereqs.outputs.last_commit_message, 'new version') || contains(needs.prereqs.outputs.last_commit_message, 'multi repo') )
  #     }}
  #   needs:
  #     - prereqs
  #     - test-single-repo
  #   name: Test Multi Repo
  #   uses: dragoscops/version-update/.github/workflows/test-single.yml@main
  #   secrets: inherit
  #   with:
  #     title: Multi Repo
  #     commit_type: fix
  #     version_message: new version multi repo
  #     workspaces: test,test/node,test/node-2
  #     version_files: VERSION,package.json,package.json

  # test-multi-repo-go:
  #   if: ${{
  #     always()
  #     && ( !contains(needs.prereqs.outputs.last_commit_message, 'new version') || contains(needs.prereqs.outputs.last_commit_message, 'multi repo') )
  #     }}
  #   needs:
  #     - prereqs
  #     - test-single-repo
  #     - test-multi-repo
  #   name: Test Multi Repo Go
  #   uses: dragoscops/version-update/.github/workflows/test-single.yml@main
  #   secrets: inherit
  #   with:
  #     title: Multi Repo Go
  #     commit_type: fix
  #     version_message: new version multi repo
  #     workspaces: test,test/node,test/go-2
  #     version_files: VERSION,package.json,go.mod
